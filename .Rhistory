aeud <- tryCatch(subset(x, ids = aeud_ids), error=function(e) NULL)
aeud_lines <- tryCatch(as_sp(aeud, "lines"), error=function(e) NULL)
aeud_points <- tryCatch(as_sp(aeud, "points"), error=function(e) NULL)
tryCatch(save.image(paste0("~/Desktop/Airports OSM Data/Data/", AirportCoord$Name[i], ".RData")), error=function(e) NULL)
tryCatch(rm(list=setdiff(ls(), c("AirportCoord", "i"))), error=function(e) NULL)
}
warnings()
# A script to get airport info from osm
library(osmar)
library(sp)
load("/Users/federicosemeraro/Desktop/AirportCoord.RData")
for (i in 2729:3000) { # 2316 CDG length(AirportCoord$Latitude)
x <- tryCatch(get_osm(center_bbox(AirportCoord$Longitude[i], AirportCoord$Latitude[i], 5000, 5000), source = osmsource_api()), error=function(e) NULL)
#assign(AirportCoord$Name[i], x)
aero_ids <- tryCatch(find(x, way(tags(k == "aeroway"))), error=function(e) NULL)
aero_ids <- tryCatch(find_down(x, way(aero_ids)), error=function(e) NULL)
aero <- tryCatch(subset(x, ids = aero_ids), error=function(e) NULL)
aero_poly <- tryCatch(as_sp(aero, "polygons"), error=function(e) NULL)
aero_lines <- tryCatch(as_sp(aero, "lines"), error=function(e) NULL)
aero_points <- tryCatch(as_sp(aero, "points"), error=function(e) NULL)
aedr_ids <- tryCatch(find(x, way(tags(v == "aerodrome"))), error=function(e) NULL)
aedr_ids <- tryCatch(find_down(x, way(aedr_ids)), error=function(e) NULL)
aedr <- tryCatch(subset(x, ids = aedr_ids), error=function(e) NULL)
aedr_poly <- tryCatch(as_sp(aedr, "polygons"), error=function(e) NULL)
aedr_points <- tryCatch(as_sp(aedr, "points"), error=function(e) NULL)
aeap_ids <- tryCatch(find(x, way(tags(v == "apron"))), error=function(e) NULL)
aeap_ids <- tryCatch(find_down(x, way(aeap_ids)), error=function(e) NULL)
aeap <- tryCatch(subset(x, ids = aeap_ids), error=function(e) NULL)
aeap_poly <- tryCatch(as_sp(aeap, "polygons"), error=function(e) NULL)
aegt_ids <- tryCatch(find(x, node(tags(v == "gate"))), error=function(e) NULL)
aegt_ids <- tryCatch(find_down(x, node(aegt_ids)), error=function(e) NULL)
aegt <- tryCatch(subset(x, ids = aegt_ids), error=function(e) NULL)
aegt_points <- tryCatch(as_sp(aegt, "points"), error=function(e) NULL)
aeha_ids <- tryCatch(find(x, way(tags(v == "hangar"))), error=function(e) NULL)
aeha_ids <- tryCatch(find_down(x, way(aeha_ids)), error=function(e) NULL)
aeha <- tryCatch(subset(x, ids = aeha_ids), error=function(e) NULL)
aeha_poly <- tryCatch(as_sp(aeha, "polygons"), error=function(e) NULL)
aeha_points <- tryCatch(as_sp(aeha, "points"), error=function(e) NULL)
aehepa_ids <- tryCatch(find(x, way(tags(v == "helipad"))), error=function(e) NULL)
aehepa_ids <- tryCatch(find_down(x, way(aehepa_ids)), error=function(e) NULL)
aehepa <- tryCatch(subset(x, ids = aehepa_ids), error=function(e) NULL)
aehepa_poly <- tryCatch(as_sp(aehepa, "polygons"), error=function(e) NULL)
aehepa_points <- tryCatch(as_sp(aehepa, "points"), error=function(e) NULL)
aehepo_ids <- tryCatch(find(x, way(tags(v == "heliport"))), error=function(e) NULL)
aehepo_ids <- tryCatch(find_down(x, way(aehepo_ids)), error=function(e) NULL)
aehepo <- tryCatch(subset(x, ids = aehepo_ids), error=function(e) NULL)
aehepo_poly <- tryCatch(as_sp(aehepo, "polygons"), error=function(e) NULL)
aehepo_points <- tryCatch(as_sp(aehepo, "points"), error=function(e) NULL)
aenaid_ids <- tryCatch(find(x, node(tags(v == "navigationaid"))), error=function(e) NULL)
aenaid_ids <- tryCatch(find_down(x, node(aenaid_ids)), error=function(e) NULL)
aenaid <- tryCatch(subset(x, ids = aenaid_ids), error=function(e) NULL)
aenaid_points <- tryCatch(as_sp(aenaid, "points"), error=function(e) NULL)
aerw_ids <- tryCatch(find(x, way(tags(v == "runway"))), error=function(e) NULL)
aerw_ids <- tryCatch(find_down(x, way(aerw_ids)), error=function(e) NULL)
aerw <- tryCatch(subset(x, ids = aerw_ids), error=function(e) NULL)
aerw_poly <- tryCatch(as_sp(aerw, "polygons"), error=function(e) NULL)
aerw_lines <- tryCatch(as_sp(aerw, "lines"), error=function(e) NULL)
aetl_ids <- tryCatch(find(x, way(tags(v == "taxilane"))), error=function(e) NULL)
aetl_ids <- tryCatch(find_down(x, way(aetl_ids)), error=function(e) NULL)
aetl <- tryCatch(subset(x, ids = aetl_ids), error=function(e) NULL)
aetl_lines <- tryCatch(as_sp(aetl, "lines"), error=function(e) NULL)
aetl_points <- tryCatch(as_sp(aetl, "points"), error=function(e) NULL)
aetw_ids <- tryCatch(find(x, way(tags(v == "taxiway"))), error=function(e) NULL)
aetw_ids <- tryCatch(find_down(x, way(aetw_ids)), error=function(e) NULL)
aetw <- tryCatch(subset(x, ids = aetw_ids), error=function(e) NULL)
aetw_lines <- tryCatch(as_sp(aetw, "lines"), error=function(e) NULL)
aetw_points <- tryCatch(as_sp(aetw, "points"), error=function(e) NULL)
aete_ids <- tryCatch(find(x, way(tags(v == "terminal"))), error=function(e) NULL)
aete_ids <- tryCatch(find_down(x, way(aete_ids)), error=function(e) NULL)
aete <- tryCatch(subset(x, ids = aete_ids), error=function(e) NULL)
aete_poly <- tryCatch(as_sp(aete, "polygons"), error=function(e) NULL)
aete_points <- tryCatch(as_sp(aete, "points"), error=function(e) NULL)
aews_ids <- tryCatch(find(x, node(tags(v == "windsock"))), error=function(e) NULL)
aews_ids <- tryCatch(find_down(x, node(aews_ids)), error=function(e) NULL)
aews <- tryCatch(subset(x, ids = aews_ids), error=function(e) NULL)
aews_points <- tryCatch(as_sp(aews, "points"), error=function(e) NULL)
aeud_ids <- tryCatch(find(x, way(tags(k == "aeroway" & v == "User Defined"))), error=function(e) NULL)
aeud_ids <- tryCatch(find_down(x, way(aeud_ids)), error=function(e) NULL)
aeud <- tryCatch(subset(x, ids = aeud_ids), error=function(e) NULL)
aeud_lines <- tryCatch(as_sp(aeud, "lines"), error=function(e) NULL)
aeud_points <- tryCatch(as_sp(aeud, "points"), error=function(e) NULL)
tryCatch(save.image(paste0("~/Desktop/Airports OSM Data/Data/", AirportCoord$Name[i], ".RData")), error=function(e) NULL)
tryCatch(rm(list=setdiff(ls(), c("AirportCoord", "i"))), error=function(e) NULL)
}
#spplot(bg_poly, c("version"))
load("/Users/federicosemeraro/Desktop/AirportCoord.RData")
for (i in 6001:length(AirportCoord$Latitude)) { # length(AirportCoord$Latitude)
a = 0
tryCatch(load(paste0("~/Desktop/Airports OSM Data/Data/", AirportCoord$Name[i], ".RData")), error=function(e) a=1)
if (a==0) {
assign(paste0("aedr_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aedr_poly)
assign(paste0("aews_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aews_points)
assign(paste0("aeap_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aeap_poly)
assign(paste0("aegt_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aegt_points)
assign(paste0("aeha_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aeha_poly)
assign(paste0("aehepo_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aehepo_poly)
assign(paste0("aehepa_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aehepa_poly)
assign(paste0("aenaid_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aenaid_points)
assign(paste0("aerw_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aerw_poly)
assign(paste0("aerw_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aerw_lines)
assign(paste0("aetl_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aetl_lines)
assign(paste0("aetw_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aetw_lines)
assign(paste0("aete_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aete_poly)
}
}
rm(aero_poly, aero_lines, aero_points, aedr_poly, aedr_points, aeap_poly,
AirportCoord, aeap, aeap_ids,
aegt_points, aehepa_poly, aehepa_points, aehepo_poly, aehepo_points,
aeha_poly, aeha_points, aenaid_points, aerw_poly, aerw_lines, aetl_lines, aetl_points,
aetw_lines, aetw_points, aete_poly, aete_points, aews_points, aeud_lines, aeud_points, a, i,
dummy_points, dummy_poly, dummy_lines, aero, aedr, aeap, aegt, aehepo, aehepa, aeha, aenaid,
aerw, aetl, aete, aetw, aews, aeud, aero_ids, aedr_ids, aeap_ids, aegt_ids, aehepo_ids, aehepa_ids, aeha_ids, aenaid_ids,
aerw_ids, aetl_ids, aete_ids, aetw_ids, aews_ids, aeud_ids, x)
save.image("~/Desktop/Airports OSM Data/FR24_AnalysisTool/4.RData")
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/1.RData")
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/2.RData")
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/3.RData")
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/4.RData")
shiny::runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/Info.RData")
load("~/Desktop/Airports OSM Data/FR24_AnalysisTool/Info.RData")
View(AirportList)
shiny::runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
load("/Users/federicosemeraro/Desktop/AirportCoord.RData")
for (i in 1:1) { # length(AirportCoord$Latitude)
a = 0
tryCatch(load(paste0("~/Desktop/Airports OSM Data/Data/", AirportCoord$Name[i], ".RData")), error=function(e) a=1)
if (a==0) {
assign(paste0("aedr_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aedr_poly)
assign(paste0("aews_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aews_points)
assign(paste0("aeap_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aeap_poly)
assign(paste0("aegt_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aegt_points)
assign(paste0("aeha_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aeha_poly)
assign(paste0("aehepo_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aehepo_poly)
assign(paste0("aehepa_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aehepa_poly)
assign(paste0("aenaid_points", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aenaid_points)
assign(paste0("aerw_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aerw_poly)
assign(paste0("aerw_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aerw_lines)
assign(paste0("aetl_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aetl_lines)
assign(paste0("aetw_lines", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aetw_lines)
assign(paste0("aete_poly", "_", AirportCoord$Latitude[i], "-", AirportCoord$Longitude[i]), aete_poly)
}
}
rm(aero_poly, aero_lines, aero_points, aedr_poly, aedr_points, aeap_poly,
AirportCoord, aeap, aeap_ids,
aegt_points, aehepa_poly, aehepa_points, aehepo_poly, aehepo_points,
aeha_poly, aeha_points, aenaid_points, aerw_poly, aerw_lines, aetl_lines, aetl_points,
aetw_lines, aetw_points, aete_poly, aete_points, aews_points, aeud_lines, aeud_points, a, i,
dummy_points, dummy_poly, dummy_lines, aero, aedr, aeap, aegt, aehepo, aehepa, aeha, aenaid,
aerw, aetl, aete, aetw, aews, aeud, aero_ids, aedr_ids, aeap_ids, aegt_ids, aehepo_ids, aehepa_ids, aeha_ids, aenaid_ids,
aerw_ids, aetl_ids, aete_ids, aetw_ids, aews_ids, aeud_ids, x)
save.image("~/Desktop/Airports OSM Data/FR24_AnalysisTool/1.RData")
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
runApp('Desktop/Airports OSM Data/FR24_AnalysisTool')
# A script to get airport info from osm
library(osmar)
library(sp)
# a <- c(1288, 5254, 5258, 5261, 6130, 6132, 7924)
load("/Users/federicosemeraro/Documents/Airbus/Projects/Big Data Analysis/FR24_AnalysisTool/Data/Info.RData")
load("/Users/federicosemeraro/Documents/Airbus/Projects/Big Data Analysis/FR24_AnalysisTool/Data/Airports/1.RData")
for (i in 1:2000) { # 2316 CDG length(AirportList$Latitude)
# x <- tryCatch(get_osm(center_bbox(AirportList$Longitude[i], AirportList$Latitude[i], 5000, 5000), source = osmsource_api()), error=function(e) NULL)
# aegt_ids <- tryCatch(find(x, node(tags(k == "aeroway" & v == "gate"))), error=function(e) NULL)
# aegt_ids <- tryCatch(find_down(x, node(find(x, node(tags(k == "aeroway" & v == "gate"))))), error=function(e) NULL)
# aegt <- tryCatch(subset(x, ids = find_down(x, node(find(x, node(tags(k == "aeroway" & v == "gate")))))), error=function(e) NULL)
# aegt_points <- tryCatch(as_sp(subset(get_osm(center_bbox(AirportList$Longitude[i], AirportList$Latitude[i], 5000, 5000), source = osmsource_api()),
#                                      ids = find_down(x, node(find(x, node(tags(k == "aeroway" & v == "gate")))))), "points"), error=function(e) NULL)
tryCatch(assign(paste0("aegt_points", "_", AirportList$Latitude[i], "-", AirportList$Longitude[i]),
as_sp(subset(get_osm(center_bbox(AirportList$Longitude[i], AirportList$Latitude[i], 5000, 5000), source = osmsource_api()),
ids = find_down(x, node(find(x, node(tags(k == "aeroway" & v == "gate")))))), "points")), error=function(e) NULL)
# tryCatch(save.image(paste0("~/Desktop/Airports OSM Data/Data/", AirportList$Name[i], ".RData")), error=function(e) NULL)
# tryCatch(rm(list=setdiff(ls(), c("AirportList", "i"))), error=function(e) NULL)
}
save.image("~/Desktop/1.RData")
shiny::runApp('Desktop')
install.packages(shinyAce)
install.packages("shinyAce")
runApp('Desktop')
M1 <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
plot(M1)
library(googleVis)
M1 <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
plot(M1)
G1a <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit')
plot(G1a)
## Please note that by default the googleVis plot command
## will open a browser window and requires Internet
## connection to display the visualisation.
## Regions examples
## The regions style fills entire regions (typically countries) with
## colors corresponding to the values that you assign
G1a <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit')
plot(G1a)
## Change projection
G1b <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(projection="kavrayskiy-vii"))
plot(G1b)
## Plot only Europe
G2 <- gvisGeoChart(Exports, "Country", "Profit",
options=list(region="150"))
plot(G2)
## Example showing US data by state
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
## Markers Example
## A marker style map renders bubble-shaped markers at specified
## locations with the color and size that you specify.
G4 <- gvisGeoChart(CityPopularity, locationvar='City', colorvar='Popularity',
options=list(region='US', height=350,
displayMode='markers',
colorAxis="{values:[200,400,600,800],
colors:[\'red', \'pink\', \'orange',\'green']}")
)
plot(G4)
G5 <- gvisGeoChart(Andrew, "LatLong", colorvar='Speed_kt',
options=list(region="US"))
plot(G5)
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar='Speed_kt',
colorvar="Pressure_mb", options=list(region="US"))
plot(G6)
## Create lat:long values and plot a map of Oceania
## Set background colour to light-blue
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
## Not run:
# Plot S&P countries' credit rating sourced from Wikipedia
# Use the hovervar to show the rating
library(XML)
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=3)
shiny::runApp('Desktop/LiMA/FR24_AnalysisTool')
a = 0
ciao = "ciao"
library(curl)
getwd()
curl("https://api.planet.com/v1/catalogs/grid-utm-25km/items/20160207_194051_1056517_RapidEye-3 \
-u 3cbb91d4b6694a59ad3277c56abd869f:")
ciao <- curl("https://api.planet.com/v1/catalogs/grid-utm-25km/items/20160207_194051_1056517_RapidEye-3 \
-u 3cbb91d4b6694a59ad3277c56abd869f:")
ciao
ciao <- curl_download("https://api.planet.com/v1/download?token=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpdGVtX2lkIjoiMjAxNjAyMDdfMTk0MDUxXzEwNTY1MTdfUmFwaWRFeWUtMyIsImFzc2V0X3R5cGUiOiJ2aXN1YWwiLCJzdWIiOiJwVTN4dHZyaVBuNXV4WmI5WGtWSWhYdE9oT2E1WXVjUVo1RXlpWS9tdkxnRllvTGx6c1ltOUlSeXcxSW1nenZ1eUc4S3ZvMHBpRi9kOVNFNEJPK2NLQT09IiwiZXhwIjoxNDU5NDY1MzQ3LCJjYXRhbG9nX2lkIjoiZ3JpZC11dG0tMjVrbS1leHBlcmltZW50YWwifQ.pvO32JY-j9bzVPRPm4ZkRHKvoyzhlip4yz9jvEtVqL1r6ZkGh2CcCtzWi_Jkhol_ZbZkTERSenONTKt90CfZNw", getwd())
ciao <- curl_download("https://api.planet.com/v1/download?token=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpdGVtX2lkIjoiMjAxNjAyMDdfMTk0MDUxXzEwNTY1MTdfUmFwaWRFeWUtMyIsImFzc2V0X3R5cGUiOiJ2aXN1YWwiLCJzdWIiOiJwVTN4dHZyaVBuNXV4WmI5WGtWSWhYdE9oT2E1WXVjUVo1RXlpWS9tdkxnRllvTGx6c1ltOUlSeXcxSW1nenZ1eUc4S3ZvMHBpRi9kOVNFNEJPK2NLQT09IiwiZXhwIjoxNDU5NDY1MzQ3LCJjYXRhbG9nX2lkIjoiZ3JpZC11dG0tMjVrbS1leHBlcmltZW50YWwifQ.pvO32JY-j9bzVPRPm4ZkRHKvoyzhlip4yz9jvEtVqL1r6ZkGh2CcCtzWi_Jkhol_ZbZkTERSenONTKt90CfZNw",
paste(getwd(), "/imagetest.tif"))
ciao <- curl_download("https://api.planet.com/v1/download?token=eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpdGVtX2lkIjoiMjAxNjAyMDdfMTk0MDUxXzEwNTY1MTdfUmFwaWRFeWUtMyIsImFzc2V0X3R5cGUiOiJ2aXN1YWwiLCJzdWIiOiJwVTN4dHZyaVBuNXV4WmI5WGtWSWhYdE9oT2E1WXVjUVo1RXlpWS9tdkxnRllvTGx6c1ltOUlSeXcxSW1nenZ1eUc4S3ZvMHBpRi9kOVNFNEJPK2NLQT09IiwiZXhwIjoxNDU5NDY1MzQ3LCJjYXRhbG9nX2lkIjoiZ3JpZC11dG0tMjVrbS1leHBlcmltZW50YWwifQ.pvO32JY-j9bzVPRPm4ZkRHKvoyzhlip4yz9jvEtVqL1r6ZkGh2CcCtzWi_Jkhol_ZbZkTERSenONTKt90CfZNw",
paste0(getwd(), "/imagetest.tif"))
getwd
getwd()
url <- "https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb"
path <- getwd()
download.file(url, path)
library(RCurl)
getURL("https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb", userpwd="key:3cbb91d4b6694a59ad3277c56abd869f")
GET("https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb", authenticate("key", "3cbb91d4b6694a59ad3277c56abd869f"))
library(httr)
GET("https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb", authenticate("key", "3cbb91d4b6694a59ad3277c56abd869f"))
download.file(url, path)
GET("https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb", authenticate("federicosemeraro94@gmail.com", "3cbb91d4b6694a59ad3277c56abd869f"))
ciao <- GET("https://api.planet.com/v0/scenes/ortho/20160808_000533_0c79/thumb", authenticate("federicosemeraro94@gmail.com", "3cbb91d4b6694a59ad3277c56abd869f"))
a = ""
a <- paste0(a," ")
a
a <- ""
N = 2
for (i in 1:N) {
for (j in 1:i) {
a <- paste0(a, " ")
if (j==N) {
a <- paste0(a, "#")
}
}
a <- paste(a, "/n")
}
print(a)
a <- ""
for (i in 1:N) {
for (j in 1:i-1) {
a <- paste0(a, " ")
}
for (k in i:N) {
a <- paste0(a, "#")
}
a <- paste(a, "/n")
}
a
a <- ""
for (i in 1:N) {
for (j in 1:i-1) {
a <- paste0(a, " ")
}
for (k in i:N) {
a <- paste0(a, "#")
}
a <- paste(a, "\n")
}
a
shiny::runApp('Downloads/LiMA')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
source('Documents/Airbus/Projects/Big Data Analysis/LiMA/runShinyApp.R')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
runApp('Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='federicosemeraro',
token='719E57778685DFAF0D7FC7083900FA84',
secret='rxqxKtxkR8z/wyK4+QZFEXY7aWzR5GPNEKq392YB')
library(rsconnect)
rsconnect::deployApp('/Users/federicosemeraro/Documents/FS_Website/federicosemeraro.com/projects/LiMA')
shiny::runApp('Documents/FS_Website/federicosemeraro.com/projects/LiMA')
runApp('Documents/FS_Website/federicosemeraro.com/projects/LiMA')
shiny::runApp('~/Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool')
load("./Data/Info.RData")
weather <- readRDS("./Data/WeatherData.rds")
load("./Data/Info.RData")
typeof(weather)
typeof(AC_FR24)
fr24data <- readRDS("./Data/fr24data.rds")
pwd
pwd()
cwd()
getwd()
setwd("/Users/federicosemeraro/Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool"")
setwd("/Users/federicosemeraro/Documents/Airbus/Projects/Big Data Analysis/LiMA/FR24_AnalysisTool")
fr24data <- readRDS("./Data/fr24data.rds")
typeof(fr24data)
runApp()
runApp()
runApp()
View(fr24data)
attach(fr24data)
fr24data <- fr24data[order(Registration,Timestamp),]
detach(fr24data)
fr24data$RowNum <- seq.int(nrow(fr24data))
fr24data$TimeDiff <- ifelse(c(0,diff(fr24data$Registration)) == 0, c(0,diff(fr24data$Timestamp/60)), 0) # Time Difference in minutes
fr24data <- fr24data[,c("RowNum", "Timestamp", "TimeDiff", "Registration", "FlightNumber", "Callsign", "Equipement", "Departure", "Destination",
"Latitude", "Longitude", "Altitude", "GroundSpeed", "Track")]
names(fr24data) <- c("RowNum", "Timestamp", "TimeDiff", "Registration", "FlightNumber", "Callsign", "AC_type", "Departure", "Destination",
"Latitude", "Longitude", "Altitude", "GroundSpeed", "Track")
runApp()
runApp()
## DATA PREPARATION
# Create a dataframe and sort by Registration and time
attach(fr24data)
fr24data <- fr24data[order(Registration,Timestamp),]
detach(fr24data)
# Creating new columns: row number, date-time
fr24data$RowNum <- seq.int(nrow(fr24data))
############################
### ON-GROUND ESTIMATION ###
############################
# Calculating Time Difference between signals (considering Reg#)
fr24data$TimeDiff <- ifelse(c(0,diff(fr24data$Registration)) == 0, c(0,diff(fr24data$Timestamp/60)), 0) # Time Difference in minutes
# Check Input
fr24data <- fr24data[,c("RowNum", "Timestamp", "TimeDiff", "Registration", "FlightNumber", "Callsign", "Equipement", "Departure", "Destination",
"Latitude", "Longitude", "Altitude", "GroundSpeed")] # Track
# Change Equipement to AC_type
names(fr24data) <- c("RowNum", "Timestamp", "TimeDiff", "Registration", "FlightNumber", "Callsign", "AC_type", "Departure", "Destination",
"Latitude", "Longitude", "Altitude", "GroundSpeed")
# Initialising OnGround
fr24data$OnGround <- rep(0, nrow(fr24data))
## OnGround Estimation (based on in the air conditions)
# Check 1
fr24data$OnGround <- ifelse(fr24data$Altitude > 0, 0, 1) # CONDITION 1: if altitude > 0 always IN AIR
#Check 2
fr24data$OnGround <- c(fr24data$OnGround[1], ifelse(fr24data$OnGround[1:(nrow(fr24data)-2)] == fr24data$OnGround[3:nrow(fr24data)] &
fr24data$OnGround[1:(nrow(fr24data)-2)] != fr24data$OnGround[2:(nrow(fr24data)-1)],
fr24data$OnGround[1:(nrow(fr24data)-2)], fr24data$OnGround[2:(nrow(fr24data)-1)]),
fr24data$OnGround[nrow(fr24data)])
#######################
### OOOI ESTIMATION ###
#######################
## Assumptions
stopassump <- 15
# Initialising OUT, OFF, ON, IN columns and other parameters in fr24data
fr24data$OUTtimestamp <- rep(0, nrow(fr24data))
fr24data$OUTcandidate <- rep(0, nrow(fr24data))
fr24data$OUT_OFFtimestamp <- rep(0, nrow(fr24data))
fr24data$OFFtimestamp <- rep(0, nrow(fr24data))
fr24data$ONtimestamp <- rep(0, nrow(fr24data))
fr24data$ON_OFFtimestamp <- rep(0, nrow(fr24data))
fr24data$INtimestamp <- rep(0, nrow(fr24data))
fr24data$INcandidate <- rep(0, nrow(fr24data))
fr24data$IN_ONtimestamp <- rep(0, nrow(fr24data))
## OFF Estimation
fr24data$OFFtimestamp[2:nrow(fr24data)]  <- ifelse(fr24data$OnGround[2:nrow(fr24data)] == 0 & fr24data$OnGround[1:(nrow(fr24data)-1)] == 1 &
fr24data$Registration[2:nrow(fr24data)] == fr24data$Registration[1:(nrow(fr24data)-1)] &
fr24data$FlightNumber[2:nrow(fr24data)] == fr24data$FlightNumber[1:(nrow(fr24data)-1)] &
fr24data$Departure[2:nrow(fr24data)] == fr24data$Departure[1:(nrow(fr24data)-1)] &
fr24data$Destination[2:nrow(fr24data)] == fr24data$Destination[1:(nrow(fr24data)-1)] &
fr24data$TimeDiff[2:nrow(fr24data)] < stopassump, fr24data$Timestamp[2:nrow(fr24data)], 0)
## ON Estimation
fr24data$ONtimestamp[2:nrow(fr24data)] <- ifelse(fr24data$OnGround[2:nrow(fr24data)] == 1 & fr24data$OnGround[1:(nrow(fr24data)-1)] == 0 &
fr24data$Registration[2:nrow(fr24data)] == fr24data$Registration[1:(nrow(fr24data)-1)] &
fr24data$FlightNumber[2:nrow(fr24data)] == fr24data$FlightNumber[1:(nrow(fr24data)-1)] &
fr24data$Departure[2:nrow(fr24data)] == fr24data$Departure[1:(nrow(fr24data)-1)] &
fr24data$Destination[2:nrow(fr24data)] == fr24data$Destination[1:(nrow(fr24data)-1)] &
fr24data$TimeDiff[2:nrow(fr24data)] < stopassump, fr24data$Timestamp[2:nrow(fr24data)] , 0)
## OUT-IN CANDIDATES
# Putting 3 to the ones that might be in times, in order to keep them
fr24data$OUTcandidate[2:nrow(fr24data)] <- ifelse(fr24data$TimeDiff[2:nrow(fr24data)] > stopassump & fr24data$OnGround[2:nrow(fr24data)] == 1 &
fr24data$Registration[2:nrow(fr24data)] == fr24data$Registration[1:(nrow(fr24data)-1)], 3,
ifelse(fr24data$Registration[2:nrow(fr24data)] != fr24data$Registration[1:(nrow(fr24data)-1)] &
fr24data$OnGround[2:nrow(fr24data)] == 1, 3, 0))
fr24data$INcandidate[1:(nrow(fr24data)-1)] <- ifelse(fr24data$TimeDiff[2:nrow(fr24data)] > stopassump & fr24data$OnGround[1:(nrow(fr24data)-1)] == 1 &
fr24data$Registration[2:nrow(fr24data)] == fr24data$Registration[1:(nrow(fr24data)-1)], 3,
ifelse(fr24data$Registration[2:nrow(fr24data)] != fr24data$Registration[1:(nrow(fr24data)-1)] &
fr24data$OnGround[1:(nrow(fr24data)-1)] == 1, 3, 0))
#######################
### OOOI ESTIMATION ###
#######################
# Assumptions
stopassump <- 15
# Isolating the important info from fr24data
oooi <- subset(fr24data, fr24data$OFFtimestamp > 0 | fr24data$ONtimestamp > 0 | fr24data$OUTcandidate == 3 | fr24data$INcandidate == 3)
# Passing OFF timestamp to ON time (already calculated the middle one)
oooi$ON_OFFtimestamp[2:nrow(oooi)] <- ifelse(oooi$ONtimestamp[2:nrow(oooi)] > 0 & oooi$OFFtimestamp[1:(nrow(oooi)-1)] > 0 &
oooi$Registration[2:nrow(oooi)] == oooi$Registration[1:(nrow(oooi)-1)] &
oooi$FlightNumber[2:nrow(oooi)] == oooi$FlightNumber[1:(nrow(oooi)-1)] &
oooi$Departure[2:nrow(oooi)] == oooi$Departure[1:(nrow(oooi)-1)] &
oooi$Destination[2:nrow(oooi)] == oooi$Destination[1:(nrow(oooi)-1)],
oooi$OFF[1:nrow(oooi)], 0)
## OUT Estimation
oooi$OUTtimestamp[1:(nrow(oooi)-1)] <- ifelse(oooi$OFFtimestamp[2:nrow(oooi)] > 0 & oooi$OUTcandidate[1:(nrow(oooi)-1)] == 3 &
oooi$Registration[2:nrow(oooi)] == oooi$Registration[1:(nrow(oooi)-1)] &
oooi$FlightNumber[2:nrow(oooi)] == oooi$FlightNumber[1:(nrow(oooi)-1)] &
oooi$Departure[2:nrow(oooi)] == oooi$Departure[1:(nrow(oooi)-1)] &
oooi$Destination[2:nrow(oooi)] == oooi$Destination[1:(nrow(oooi)-1)],
oooi$Timestamp[1:(nrow(oooi)-1)], 0)
# Passing OFF timestamp to OUT time
oooi$OUT_OFFtimestamp[1:(nrow(oooi)-1)] <- ifelse(oooi$OUTtimestamp[1:(nrow(oooi)-1)] > 0 & oooi$OFFtimestamp[2:nrow(oooi)] > 0 &
oooi$OUTcandidate[1:(nrow(oooi)-1)] == 3 &
oooi$Registration[2:nrow(oooi)] == oooi$Registration[1:(nrow(oooi)-1)] &
oooi$FlightNumber[2:nrow(oooi)] == oooi$FlightNumber[1:(nrow(oooi)-1)] &
oooi$Departure[2:nrow(oooi)] == oooi$Departure[1:(nrow(oooi)-1)] &
oooi$Destination[2:nrow(oooi)] == oooi$Destination[1:(nrow(oooi)-1)],
oooi$OFFtimestamp[2:nrow(oooi)], 0)
## IN Estimation
oooi$INtimestamp[2:nrow(oooi)] <- ifelse(oooi$ONtimestamp[1:(nrow(oooi)-1)] > 0 & oooi$INcandidate[2:nrow(oooi)] == 3 &
oooi$OUTtimestamp[1:(nrow(oooi)-1)] == 0 &
oooi$Registration[2:nrow(oooi)] == oooi$Registration[1:(nrow(oooi)-1)],
oooi$Timestamp[2:nrow(oooi)], 0)
# Passing ON timestamp to IN time
oooi$IN_ONtimestamp[2:nrow(oooi)] <- ifelse(oooi$INtimestamp[2:nrow(oooi)] > 0 & oooi$ONtimestamp[1:(nrow(oooi)-1)] &
oooi$Registration[2:nrow(oooi)] == oooi$Registration[1:(nrow(oooi)-1)],
oooi$ONtimestamp[1:(nrow(oooi)-1)], 0)
oooi <- oooi[,c("RowNum", "Timestamp", "Registration", "FlightNumber", "AC_type", "Departure", "Destination",
"Latitude", "Longitude", "Altitude", "GroundSpeed", "OnGround", "TimeDiff", "OUTtimestamp",
"OFFtimestamp", "ONtimestamp", "INtimestamp","OUT_OFFtimestamp", "ON_OFFtimestamp", "IN_ONtimestamp")]
oooi <- subset(oooi, oooi$OUTtimestamp > 0 | oooi$OFFtimestamp > 0 | oooi$ONtimestamp > 0 | oooi$INtimestamp > 0)
OUTdata <- subset(oooi,oooi$OUTtimestamp > 0)
OUTdata <- OUTdata[,c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OUT_OFFtimestamp", "OUTtimestamp", "RowNum", "Latitude", "Longitude")]
OFFdata <- subset(oooi, oooi$OFFtimestamp > 0)
OFFdata <- OFFdata[,c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OFFtimestamp", "RowNum", "Latitude", "Longitude")]
ONdata <- subset(oooi,oooi$ONtimestamp > 0)
ONdata <- ONdata[,c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "ON_OFFtimestamp", "ONtimestamp", "RowNum", "Latitude", "Longitude")]
INdata <- subset(oooi, oooi$INtimestamp > 0)
INdata <- INdata[,c("Registration", "IN_ONtimestamp", "INtimestamp", "RowNum", "Latitude", "Longitude")]
FlightSummary <- merge(OFFdata, OUTdata, by.x = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OFFtimestamp"),
by.y = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OUT_OFFtimestamp"),
all=TRUE, suffixes=c(".OFF", ".OUT"))
FlightSummary <- merge(FlightSummary, ONdata, by.x = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OFFtimestamp"),
by.y = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "ON_OFFtimestamp"),
all=TRUE, suffixes=c("", ".ON"))
FlightSummary <- rename(FlightSummary, c("RowNum"="RowNum.ON", "Latitude"="Latitude.ON", "Longitude"="Longitude.ON"))
View(FlightSummary)
FlightSummary <- rename(FlightSummary, c("RowNum"="RowNum.ON", "Latitude"="Latitude.ON", "Longitude"="Longitude.ON"))
FlightSummary(,c("RowNum", "Latitude", "Longitude"))
FlightSummary[],c("RowNum", "Latitude", "Longitude")]
FlightSummary[,c("RowNum", "Latitude", "Longitude")]
FlightSummary <- rename(FlightSummary, c("RowNum"="RowNum.ON", "Latitude"="Latitude.ON", "Longitude"="Longitude.ON"))
FlightSummary <- merge(FlightSummary, INdata, by.x = c("Registration", "ONtimestamp"),by.y = c("Registration", "IN_ONtimestamp"),all=TRUE, suffixes=c("", ".IN"))
FlightSummary <- rename(FlightSummary, c("RowNum"="RowNum.IN", "Latitude"="Latitude.IN", "Longitude"="Longitude.IN"))
FlightSummary <- merge(FlightSummary, ONdata, by.x = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "OFFtimestamp"),
by.y = c("Registration", "FlightNumber", "AC_type", "Departure", "Destination", "ON_OFFtimestamp"),
all=TRUE, suffixes=c("", ".ON"))
FlightSummary <- plyr::rename(FlightSummary, c("RowNum"="RowNum.ON", "Latitude"="Latitude.ON", "Longitude"="Longitude.ON"))
runApp()
remove.packages("leaflet", lib)
library(utils)
remove.packages()
remove.packages(leaflet)
remove.packages("leaflet")
runApp()
runApp()
runApp()
runApp()
sessionInfo()
